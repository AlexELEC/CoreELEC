From b2cdc3bb20fb30777a0c024d727027f56e22d28e Mon Sep 17 00:00:00 2001
From: Portisch <hugo.portisch@yahoo.de>
Date: Tue, 4 Mar 2025 12:02:26 +0100
Subject: [PATCH] Revert "fixed: don't call the config updated callback if
 nothing has changed. auto set wake devices or activate source so these values
 match what happens on the tv"

This reverts commit 05fc6d01e6e3f01164f3e844f88ece4bf19e16c9.
---
 src/libcec/CECClient.cpp | 78 +++++++++-------------------------------
 1 file changed, 17 insertions(+), 61 deletions(-)

diff --git a/src/libcec/CECClient.cpp b/src/libcec/CECClient.cpp
index b38fab3..32f8eb6 100644
--- a/src/libcec/CECClient.cpp
+++ b/src/libcec/CECClient.cpp
@@ -214,7 +214,12 @@ bool CCECClient::SetHDMIPort(const cec_logical_address iBaseDevice, const uint8_
     }
   }
 
-  return SetPhysicalAddress(iPhysicalAddress);
+  // and set the address
+  SetDevicePhysicalAddress(iPhysicalAddress);
+
+  QueueConfigurationChanged(m_configuration);
+
+  return bReturn;
 }
 
 void CCECClient::ResetPhysicalAddress(void)
@@ -269,11 +274,6 @@ bool CCECClient::SetPhysicalAddress(const libcec_configuration &configuration)
 
 bool CCECClient::SetPhysicalAddress(const uint16_t iPhysicalAddress)
 {
-  if (m_configuration.iPhysicalAddress == iPhysicalAddress)
-  {
-    return true;
-  }
-
   // update the configuration
   {
     CLockObject lock(m_mutex);
@@ -882,7 +882,6 @@ bool CCECClient::GetCurrentConfiguration(libcec_configuration &configuration)
 
 bool CCECClient::SetConfiguration(const libcec_configuration &configuration)
 {
-  bool notifyUpper = false;
   libcec_configuration defaultSettings;
   bool bIsRunning(m_processor && m_processor->CECInitialised());
   CCECBusDevice *primary = bIsRunning ? GetPrimaryDevice() : NULL;
@@ -902,12 +901,9 @@ bool CCECClient::SetConfiguration(const libcec_configuration &configuration)
   // update the TV vendor override
   SetTVVendorOverride((cec_vendor_id)configuration.tvVendor);
 
+  // just copy these
   {
     CLockObject lock(m_mutex);
-    bool activeSourceChanged = (configuration.bActivateSource != m_configuration.bActivateSource);
-    bool wakeTvChanged = (configuration.wakeDevices.IsSet(CECDEVICE_TV) != m_configuration.wakeDevices.IsSet(CECDEVICE_TV));
-
-    // just copy these
     m_configuration.bActivateSource            = configuration.bActivateSource;
     m_configuration.bGetSettingsFromROM        = configuration.bGetSettingsFromROM;
     m_configuration.wakeDevices                = configuration.wakeDevices;
@@ -927,27 +923,6 @@ bool CCECClient::SetConfiguration(const libcec_configuration &configuration)
     if ((configuration.bAutoPowerOn == 0) || (configuration.bAutoPowerOn == 1))
       m_configuration.bAutoPowerOn             = configuration.bAutoPowerOn;
 #endif
-
-    if (activeSourceChanged)
-    {
-      // activate source will wake up the TV too
-      if ((m_configuration.bActivateSource == 1) && !m_configuration.wakeDevices.IsSet(CECDEVICE_TV))
-      {
-        m_configuration.wakeDevices.Set(CECDEVICE_TV);
-        LIB_CEC->AddLog(CEC_LOG_DEBUG, "enable tv wake up");
-        notifyUpper = true;
-      }
-    }
-    if (wakeTvChanged)
-    {
-      // disabling waking up the TV disables activate source too
-      if (!m_configuration.wakeDevices.IsSet(CECDEVICE_TV) && (m_configuration.bActivateSource != 0))
-      {
-        m_configuration.bActivateSource = 0;
-        LIB_CEC->AddLog(CEC_LOG_DEBUG, "disable active source");
-        notifyUpper = true;
-      }
-    }
   }
 
   bool bNeedReinit(false);
@@ -995,11 +970,7 @@ bool CCECClient::SetConfiguration(const libcec_configuration &configuration)
     primary->ActivateSource();
   }
 
-  if (notifyUpper)
-  {
-    QueueConfigurationChanged(m_configuration);
-  }
-
+  LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s: double tap timeout = %ums, repeat rate = %ums, release delay = %ums", __FUNCTION__, DoubleTapTimeoutMS(), m_configuration.iButtonRepeatRateMs, m_configuration.iButtonReleaseDelayMs);
   return true;
 }
 
@@ -1291,10 +1262,6 @@ void CCECClient::SetTVVendorOverride(const cec_vendor_id id)
 {
   {
     CLockObject lock(m_mutex);
-    if (m_configuration.tvVendor == id)
-    {
-      return;
-    }
     m_configuration.tvVendor = id;
   }
 
@@ -1320,14 +1287,11 @@ void CCECClient::SetOSDName(const std::string &strDeviceName)
 {
   {
     CLockObject lock(m_mutex);
-    char buf[LIBCEC_OSD_NAME_SIZE + 1] = { 0 };
-    strncpy(buf, strDeviceName.c_str(), LIBCEC_OSD_NAME_SIZE);
-    if (!strncmp(m_configuration.strDeviceName, buf, LIBCEC_OSD_NAME_SIZE))
-      return;
-    strncpy(m_configuration.strDeviceName, buf, LIBCEC_OSD_NAME_SIZE);
-    LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s - using OSD name '%s'", __FUNCTION__, buf);
+    if (!strncmp(m_configuration.strDeviceName, strDeviceName.c_str(), LIBCEC_OSD_NAME_SIZE)) return;
+    snprintf(m_configuration.strDeviceName, LIBCEC_OSD_NAME_SIZE, "%s", strDeviceName.c_str());
   }
 
+  LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s - using OSD name '%s'", __FUNCTION__, strDeviceName.c_str());
 
   CCECBusDevice *primary = GetPrimaryDevice();
   if (primary && primary->GetCurrentOSDName() != strDeviceName.c_str())
@@ -1384,16 +1348,10 @@ bool CCECClient::AutodetectPhysicalAddress(void)
 
 void CCECClient::SetClientVersion(uint32_t version)
 {
-  bool changed;
-  {
-    CLockObject lock(m_mutex);
-    changed = (m_configuration.clientVersion != version);
-    m_configuration.clientVersion = version;
-  }
-  if (changed)
-  {
-    LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s - using client version '%s'", __FUNCTION__, CCECTypeUtils::VersionToString(version).c_str());
-  }
+  LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s - using client version '%s'", __FUNCTION__, CCECTypeUtils::VersionToString(version).c_str());
+
+  CLockObject lock(m_mutex);
+  m_configuration.clientVersion = (uint32_t)version;
 }
 
 uint32_t CCECClient::GetClientVersion(void)
@@ -1413,12 +1371,10 @@ bool CCECClient::SetDeviceTypes(const cec_device_type_list &deviceTypes)
     m_configuration.deviceTypes = deviceTypes;
   }
 
-  
+  SaveConfiguration(m_configuration);
+
   if (bNeedReinit)
-  {
     LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s - using primary device type '%s'", __FUNCTION__, ToString(deviceTypes[0]));
-    SaveConfiguration(m_configuration);
-  }
 
   return bNeedReinit;
 }
-- 
2.43.0

