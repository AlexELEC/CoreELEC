From 741c31c63220f965e182b6de1e4ffb7434408142 Mon Sep 17 00:00:00 2001
From: tanio99 <tanio99@wolke7.net>
Date: Tue, 31 Oct 2023 12:27:26 +0100
Subject: [PATCH 2/2] MKV: added basic 'block addition mapping' support for
 'mvcC' extradata

---
 libavformat/internal.h    | 11 +++++++++++
 libavformat/matroskadec.c | 29 +++++++++++++++++++++++++++++
 libavformat/utils.c       | 22 ++++++++++++++++++++++
 3 files changed, 62 insertions(+)

diff --git a/libavformat/internal.h b/libavformat/internal.h
index 8e8971b..b20c685 100644
--- a/libavformat/internal.h
+++ b/libavformat/internal.h
@@ -700,6 +700,17 @@ int ff_rename(const char *url_src, const char *url_dst, void *logctx);
  */
 int ff_alloc_extradata(AVCodecParameters *par, int size);
 
+/**
+ * Re-allocate extradata with additional AV_INPUT_BUFFER_PADDING_SIZE at end
+ * which is always set to 0.
+ *
+ * Previously allocated extradata in par will be copied.
+ *
+ * @param size size of new extradata
+ * @return 0 if OK, AVERROR_xxx on error
+ */
+int ff_realloc_extradata(AVCodecParameters *par, int size);
+
 /**
  * Copies the whilelists from one context to the other
  */
diff --git a/libavformat/matroskadec.c b/libavformat/matroskadec.c
index c8741ff..65a8b4c 100644
--- a/libavformat/matroskadec.c
+++ b/libavformat/matroskadec.c
@@ -2502,6 +2502,28 @@ static int mkv_parse_dvcc_dvvc(AVFormatContext *s, AVStream *st, const MatroskaT
     return ff_isom_parse_dvcc_dvvc(s, st, bin->data, bin->size);
 }
 
+static int mkv_parse_mvcc(AVStream *st, EbmlBin *bin)
+{
+    const uint32_t fill = 0xfdf8f800;
+    const uint32_t mvc_ext_len = 4 + bin->size;
+
+    /* merge the extradata with MVC extradata */
+    const int ex_size = st->codecpar->extradata_size + 4 + 4 + mvc_ext_len;
+    const int offs = st->codecpar->extradata_size;
+
+    if (ff_realloc_extradata(st->codecpar, ex_size)) {
+        return AVERROR(ENOMEM);
+    }
+
+    AV_WB32(st->codecpar->extradata + offs, fill);
+    AV_WB32(st->codecpar->extradata + offs + 4, mvc_ext_len);
+    AV_WB32(st->codecpar->extradata + offs + 8, MKBETAG('m', 'v', 'c', 'C'));
+
+    memcpy(st->codecpar->extradata + offs + 12, bin->data, bin->size);
+
+    return 0;
+}
+
 static int mkv_parse_block_addition_mappings(AVFormatContext *s, AVStream *st, MatroskaTrack *track)
 {
     const EbmlList *mappings_list = &track->block_addition_mappings;
@@ -2537,6 +2559,13 @@ static int mkv_parse_block_addition_mappings(AVFormatContext *s, AVStream *st, M
                 return ret;
 
             break;
+
+        case MKBETAG('m','v','c','C'):
+            if ((ret = mkv_parse_mvcc(st, &mapping->extradata)) < 0)
+                return ret;
+
+            break;
+
         default:
             av_log(s, AV_LOG_DEBUG,
                    "Unknown Block Addition Mapping type 0x%"PRIx64", value %"PRIu64", name \"%s\"\n",
diff --git a/libavformat/utils.c b/libavformat/utils.c
index e9ded62..7127363 100644
--- a/libavformat/utils.c
+++ b/libavformat/utils.c
@@ -242,6 +242,28 @@ int ff_alloc_extradata(AVCodecParameters *par, int size)
     return 0;
 }
 
+int ff_realloc_extradata(AVCodecParameters *par, int size)
+{
+    uint8_t *new_extradata;
+    int old_size = par->extradata_size;
+
+    if (size < old_size || size >= INT32_MAX - AV_INPUT_BUFFER_PADDING_SIZE)
+        return AVERROR(EINVAL);
+
+    new_extradata = av_malloc(size + AV_INPUT_BUFFER_PADDING_SIZE);
+    if (!new_extradata)
+        return AVERROR(ENOMEM);
+
+    memset(new_extradata, 0, size + AV_INPUT_BUFFER_PADDING_SIZE);
+    memcpy(new_extradata, par->extradata, old_size);
+
+    av_freep(&par->extradata);
+    par->extradata = new_extradata;
+    par->extradata_size = size;
+
+    return 0;
+}
+
 /*******************************************************/
 
 uint64_t ff_ntp_time(void)
-- 
2.43.0

